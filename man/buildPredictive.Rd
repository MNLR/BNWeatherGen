% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/buildPredictive.R
\name{buildPredictive}
\alias{buildPredictive}
\title{Build a predictive discrete Bayesian Network using climate data.}
\usage{
buildPredictive(
  data,
  structure.learning.algorithm = "tabu",
  structure.learning.args.list = list(),
  param.learning.method = "bayes",
  forbid.GG = FALSE,
  forbid.DD = FALSE,
  forbid.DtoG = FALSE,
  force.closest.GD = NULL,
  closest.GD.direction = NULL,
  forbid.GD = FALSE,
  structure.learning.steps = 1,
  fix.intermediate = TRUE,
  structure.learning.algorithm2 = NULL,
  structure.learning.args.list2 = list(),
  return.intermediate = FALSE,
  compile.junction = TRUE,
  parallelize = FALSE,
  n.cores = NULL,
  cluster.type = "FORK"
)
}
\arguments{
\item{data}{Expects output from \code{preparePredictorsBN()}.}

\item{structure.learning.algorithm}{Algorithm used to perform structure learning, with name
as text. Supports all the score-based, constraint-based and hybrid bayesian network structure
learning algorithms from \code{\link[bnlearn]{bnlearn}}.
Refer to \code{Details} for a list of supported algorithms.}

\item{structure.learning.args.list}{List of arguments passed to structure.learning.algorithm,
in particular distance argument if local learning is used. Note that other arguments, e.g.
\code{whitelist}, are an option (check the naming convention, see \code{Details}).
Refer to \code{\link[bnlearn]{bnlearn}} for the specific options.}

\item{param.learning.method}{Either "bayes" or "mle", passed to learn the parameters for the
Conditional Probability Tables for the built DAG \code{data}.}

\item{forbid.GG}{If set to TRUE, arcs between grid or G nodes will be forbidden.}

\item{forbid.DD}{If set to TRUE, arcs between local, i.e. station or D nodes, will be forbidden.}

\item{forbid.DtoG}{If set to TRUE, arcs from D nodes to G nodes will be forbidden.}

\item{force.closest.GD}{Expects a positive integer or \code{NULL}. If not \code{NULL}, each D node will
be linked, see \code{closest.GD.direction}, with the n closest G node(s), where n is
\code{force.closest.GD}.}

\item{closest.GD.direction}{Either \code{NULL}, which lets the structure learning algorithm
decide the direction, "up", which will place the arc(s) in the form \code{D -> G}, or "down",
which will place the arc(s) in the form \code{G -> D}.}

\item{forbid.GD}{If set to TRUE, arcs between G and D nodes will be forbidden. See
\code{Details}.}

\item{structure.learning.steps}{It is used to perform structure learning in
 two steps.
 Refer to \code{Details}.
\itemize{
 \item \code{1} or \code{NULL} (Default) 1 step
 \item \code{2} or \code{c("local", "global")} If \code{dynamic = FALSE} learn first a DAG
 for D nodes, then inject G nodes. If \code{dynamic = TRUE} it equals
 c("local-global", "past")
}
Note that only first two options are valid when \code{dynamic = FALSE}}

\item{fix.intermediate}{Set to TRUE to forbid the creation of new arcs in the next steps
for already built DAGs. See \code{Details}.
\code{structure.learning.algorithm2} and \code{structure.learning.args.list2}. See
 \code{Details}.}

\item{structure.learning.algorithm2}{Same as structure.learning.algorithm for the second
step if \code{structure.learning.steps} is employed. Ignored otherwise.}

\item{structure.learning.args.list2}{Same as structure.learning.args.list for the second
step if \code{structure.learning.steps} is employed. Ignored otherwise.}

\item{return.intermediate}{Add the intermediate DAGs to the output, as $intermediateDBN1 and
$intermediateDBN2 (if any) if \code{structure.learning.steps} is employed.}

\item{compile.junction}{Compile the junction from BN.fit to compute probabilities. Can be set
to FALSE, in which case it can still be computed if needed at the training stage.}

\item{parallelize}{Set to \code{TRUE} for parallelization. Refer to the
\code{\link[parallel]{parallel}} and see \code{Details}.}

\item{n.cores}{When \code{parallelize = TRUE}, number of threads to be used, will use
detectCores()-1 if not set.}

\item{cluster.type}{Either "PSOCK" or "FORK". Use the former under Windows systems,
refer to \code{\link[parallel]{parallel}} package.}
}
\value{
An object of type CBN which contains the learnt Bayesian Network.
}
\description{
A predictive network expects a Global Climate Model dataset and a stations dataset.
Can be used to downscale discrete data to local scales by means of Bayesian Networks.
}
\details{
\strong{Structure Learning Algorithms}
Use \code{structure.learning.algorithm} to specify the algorithm for the structure (DAG) learning process.
Currently it DOES NOT support local discovery algorithms, expect malfuncion if used.
List of supported algorithms:
\code{"hc"}, \code{"tabu"} (score-based), \code{"gs"}, \code{"iamb"}, \code{"fast.iamb"}, \code{"inter.iamb"} (constraint-based),
\code{"mmhc"}, \code{"rsmax2"} (hybrid).
Check their corresponding parameters in \code{\link[bnlearn]{bnlearn}}, arguments may be passed to the algorithm through
the parameter structure.learning.args.list. Do not forget to set the distance argument in \code{structure.learning.args.list} for
local learning.

\strong{Two or Three Step Learning}
\itemize{
\item \code{structure.learning.steps} allows to build separate DAGs for each set of nodes. Note that by employing the three
\code{structure.learning.algorithm}, \code{structure.learning.algorithm2}, \code{structure.learning.algorithm3} arguments and their
corresponding \code{structure.learning.args.list*} counterparts, many different configurations can be used for the structure learning
process, e.g. by using grow-shrink for D nodes with distance set to 1, then injecting the left nodes using hill-climbing without distance
restriction.
\item \code{fix.intermediate}, if set to \code{TRUE}, will forbid the creation of new arcs between nodes that were present in the previous
learning step. E.g. if \code{structure.learning.steps = c("local", "global\-past")}, no new arcs between D nodes will be created in the
second step, as the first DAG will be considered finished. If set to \code{FALSE}, the previous step DAG will be kept, but the next
learning algorithm could create new arcs between D nodes over the first one.
}

\strong{Forbidding or Forcing Arcs}
For non dynamic Bayesian Networks, i.e. when \code{dynamic = FALSE} (default),
\code{forbid.GG}, \code{forbid.DD}, \code{forbid.DtoG}, \code{force.closest.GD},
\code{forbid.GD}, \code{fix.intermediate}, \code{structure.learning.steps} allow
introducing constraints to the structure learning algorithm. The user might also combine them
with \code{structure.learning.args.list$whitelist} and
\code{structure.learning.args.list$blacklist}. As \code{whitelist} has priority over
 \code{blacklist}, i.e. an arc placed in both will always be present in the DAG, they
 provide maximum flexibility. Bearing the priority of the \code{whitelist},
 \code{force.closest.GD = TRUE} and \code{forbid.GD = TRUE} will, for example, forbid
 the placement of \emph{aditional} arcs beyond those specified as the closest G-D.

 When manually specifying a whitelist or blacklist through
 \code{structure.learning.args.list}, beware of the naming convention. It overrides
  the names and marks them as either "D.X" or "G.X", preditand and predictor nodes,
  respectivelly. It is best to plot a dummy network using plotDBN() first.

\strong{Aditional details}
Parameters \code{output.marginals} and \code{compile.junction} are useful to save time
 if the user only intends to visualize the DAG.
}
\author{
Mikel N. Legasa
}
